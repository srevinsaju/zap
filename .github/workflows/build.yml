name: Go

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - v*.*
  pull_request:
    branches: [ main ]

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '>=1.19'

    - name: Check formatting
      run: |
        gofmt -e .

  test:
    needs: [qa]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Build
        run: |
          go build -v .
      - name: Test
        run: |
          ZAP_BIN="$(realpath zap)" ./scripts/test.sh

  build:
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ARCH: ['386', 'amd64', 'arm', 'arm64']
        
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '>=1.21'

    - name: Build
      run: |
        git fetch --force --tags
        export ZAP_VERSION="$(git describe --tags --always --match 'v*.*' | sed 's,-,.,g')"
        GOOS=linux GOARCH=${{ matrix.ARCH }} go build -ldflags "-s -w -X main.BuildVersion=$ZAP_VERSION -X main.BuildTime=$(date +%s) -X main.BuildSource=github" -o zap-${{ matrix.ARCH }} .

    - name: Upload Asset
      uses: actions/upload-artifact@v2
      with:
        path: zap-${{ matrix.ARCH }} 
        name: zap-${{matrix.ARCH }}
        
  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: download actions
      uses: actions/download-artifact@v2
      
    - name: Show releases
      run: ls -al

    - name: Generate supported metadata
      run: |
        git fetch --force --tags
        export ZAP_VERSION="$(git describe --tags --always --match 'v*.*' | sed 's,-,.,g')"
        echo $ZAP_VERSION > zap-release-metadata 

    - name: Create release and upload artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        wget https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
        chmod +x pyuploadtool-x86_64.AppImage
        APPIMAGE_EXTRACT_AND_RUN=1 ./pyuploadtool-x86_64.AppImage zap-*/zap-* ./zap-release-metadata
